webpackJsonp([1,4],{342:function(n,e){function a(n){throw new Error("Cannot find module '"+n+"'.")}a.keys=function(){return[]},a.resolve=a,n.exports=a,a.id=342},343:function(n,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=a(431),l=a(0),o=a(455),r=a(452);o.a.production&&a.i(l.a)(),a.i(s.a)().bootstrapModule(r.a)},451:function(n,e,a){"use strict";var s=a(0);a.d(e,"a",function(){return r});var l=this&&this.__decorate||function(n,e,a,s){var l,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,a):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(n,e,a,s);else for(var t=n.length-1;t>=0;t--)(l=n[t])&&(r=(o<3?l(r):o>3?l(e,a,r):l(e,a))||r);return o>3&&r&&Object.defineProperty(e,a,r),r},o=this&&this.__metadata||function(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},r=function(){function n(){this.title="app works!"}return n=l([a.i(s.U)({selector:"app-root",template:a(610),styles:[a(607)]}),o("design:paramtypes",[])],n)}()},452:function(n,e,a){"use strict";var s=a(191),l=a(0),o=a(421),r=a(427),t=a(451),i=a(454),u=a(453);a.d(e,"a",function(){return p});var d=this&&this.__decorate||function(n,e,a,s){var l,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,a):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(n,e,a,s);else for(var t=n.length-1;t>=0;t--)(l=n[t])&&(r=(o<3?l(r):o>3?l(e,a,r):l(e,a))||r);return o>3&&r&&Object.defineProperty(e,a,r),r},c=this&&this.__metadata||function(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},p=function(){function n(){}return n=d([a.i(l.b)({declarations:[t.a,i.a,u.a],imports:[s.a,o.a,r.a],providers:[],bootstrap:[t.a]}),c("design:paramtypes",[])],n)}()},453:function(n,e,a){"use strict";var s=a(0);a.d(e,"a",function(){return r});var l=this&&this.__decorate||function(n,e,a,s){var l,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,a):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(n,e,a,s);else for(var t=n.length-1;t>=0;t--)(l=n[t])&&(r=(o<3?l(r):o>3?l(e,a,r):l(e,a))||r);return o>3&&r&&Object.defineProperty(e,a,r),r},o=this&&this.__metadata||function(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},r=function(){function n(){}return n.prototype.ngOnInit=function(){},n=l([a.i(s.U)({selector:"app-header",template:a(611),styles:[a(608)]}),o("design:paramtypes",[])],n)}()},454:function(n,e,a){"use strict";var s=a(0);a.d(e,"a",function(){return r});var l=this&&this.__decorate||function(n,e,a,s){var l,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,a):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(n,e,a,s);else for(var t=n.length-1;t>=0;t--)(l=n[t])&&(r=(o<3?l(r):o>3?l(e,a,r):l(e,a))||r);return o>3&&r&&Object.defineProperty(e,a,r),r},o=this&&this.__metadata||function(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)},r=(function(){function n(){}}(),function(){function n(){}}(),function(){function n(){}}(),function(){function n(){}}(),function(){function n(){}}(),function(){function n(){}return n.prototype.ngOnInit=function(){this.hrmanager={salary:null,daysSaved:null,workingDays:null,saving:null},this.losthour={avgSalary:null,noOfEmployees:null,hoursGained:null,saving:null},this.payrolladmin={salary:null,daysSaved:null,workingDays:null,saving:null},this.queries={avgSalary:null,noOfEmployees:null,minutesGained:null,saving:null},this.roi={roiperannum:null}},n.prototype.processFormHR=function(){this.hrmanager.saving=Math.round(this.hrmanager.daysSaved/this.hrmanager.workingDays*this.hrmanager.salary)},n.prototype.resetHR=function(){this.hrmanager={salary:null,daysSaved:null,workingDays:null,saving:null}},n.prototype.processFormLH=function(){this.losthour.saving=Math.round(this.losthour.avgSalary*this.losthour.noOfEmployees*this.losthour.hoursGained/8)},n.prototype.resetLH=function(){this.losthour={avgSalary:null,noOfEmployees:null,hoursGained:null,saving:null}},n.prototype.processFormPA=function(){this.payrolladmin.saving=Math.round(this.payrolladmin.daysSaved/this.payrolladmin.workingDays*this.payrolladmin.salary)},n.prototype.resetPA=function(){this.payrolladmin={salary:null,daysSaved:null,workingDays:null,saving:null}},n.prototype.processFormQ=function(){this.queries.saving=Math.round(this.queries.avgSalary*this.queries.noOfEmployees*this.queries.minutesGained/8/60)},n.prototype.resetQ=function(){this.queries={avgSalary:null,noOfEmployees:null,minutesGained:null,saving:null}},n.prototype.calculateROI=function(){this.roi.roiperannum=Math.round(12*(this.hrmanager.saving+this.losthour.saving+this.payrolladmin.saving+this.queries.saving))},n=l([a.i(s.U)({selector:"app-home",template:a(612),styles:[a(609)]}),o("design:paramtypes",[])],n)}())},455:function(n,e,a){"use strict";a.d(e,"a",function(){return s});var s={production:!0}},607:function(n,e){n.exports="body{margin:0}"},608:function(n,e){n.exports=""},609:function(n,e){n.exports="input.ng-invalid.ng-touched{border-left:5px solid red}input.ng-valid.ng-touched{border-left:5px solid green}input{max-width:500px}.row{max-width:1200px;text-align:left}form{padding-left:4%}ul{list-style-type:none;padding-left:0}li{display:inline-block}"},610:function(n,e){n.exports="<app-header></app-header>\n<app-home></app-home>\n"},611:function(n,e){n.exports='<h2 class="text-center">\n  ROI Calculator\n</h2>\n \n'},612:function(n,e){n.exports='<div align="center">\n<div class="row">\n  <div class="col-sm-6" >\n    <h4 class="text-center">Cost of HR Manager/Executive Time</h4>\n    <form (ngSubmit)="processFormHR()" #HRform="ngForm" >\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': HRsalary.invalid && HRsalary.touched,\n        \'has-success\': HRsalary.valid && HRsalary.touched }">\n        <label class="control-label">Salary : </label>\n        <input type="number" class="form-control" name="HRsalary" required\n        [(ngModel)]="hrmanager.salary"\n        #HRsalary="ngModel">\n        <span class="help-block" *ngIf="HRsalary.invalid && HRsalary.touched">\n            Salary is required.\n        </span>\n      </div>\n\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': HRdaysSaved.invalid && HRdaysSaved.touched,\n        \'has-success\': HRdaysSaved.valid && HRdaysSaved.touched }">\n        <label class="control-label">Days Saved : </label>\n        <input type="number" class="form-control" name="HRdaysSaved" required\n        [(ngModel)]="hrmanager.daysSaved"\n        #HRdaysSaved="ngModel">\n        <span class="help-block" *ngIf="HRdaysSaved.invalid && HRdaysSaved.touched">\n            Days Saved is required.\n        </span>\n      </div>\n\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': HRworkingDays.invalid && HRworkingDays.touched,\n        \'has-success\': HRworkingDays.valid && HRworkingDays.touched }">\n        <label class="control-label">Working Days in Month : </label>\n        <input type="number" class="form-control" name="HRworkingDays" required\n        [(ngModel)]="hrmanager.workingDays"\n        #HRworkingDays="ngModel">\n        <span class="help-block" *ngIf="HRworkingDays.invalid && HRworkingDays.touched">\n            Working Days in Month is required.\n        </span>\n      </div>\n      <ul>\n        <li>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary" [disabled]="HRform.invalid">Calculate</button>\n      </div>\n        </li>\n        <li>\n      <div class="form-group float-right">\n        <button type="reset" value="Reset Form" class="btn btn-warning" (click)="resetHR()">Reset</button>\n      </div>\n        </li>\n      </ul>\n      <p *ngIf="hrmanager.saving!=null" class="lead well">Saving : {{hrmanager.saving}}</p>\n    </form>\n  </div>\n\n\n\n\n  <div class="col-sm-6">\n    <h4 class="text-center">Lost hour salary savings (with Attendance System)</h4>\n    <form (ngSubmit)="processFormLH()" #LHform="ngForm">\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': LHavgSalary.invalid && LHavgSalary.touched,\n        \'has-success\': LHavgSalary.valid && LHavgSalary.touched }">\n        <label class="control-label">Avg Salary : </label>\n        <input type="number" class="form-control" name="LHavgSalary" required\n        [(ngModel)]="losthour.avgSalary"\n        #LHavgSalary="ngModel">\n        <span class="help-block" *ngIf="LHavgSalary.invalid && LHavgSalary.touched">\n            Avg Salary is required.\n        </span>\n      </div>\n\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': LHnoOfEmployees.invalid && LHnoOfEmployees.touched,\n        \'has-success\': LHnoOfEmployees.valid && LHnoOfEmployees.touched }">\n        <label class="control-label">No of Employees : </label>\n        <input type="number" class="form-control" name="LHnoOfEmployees" required\n        [(ngModel)]="losthour.noOfEmployees"\n        #LHnoOfEmployees="ngModel">\n        <span class="help-block" *ngIf="LHnoOfEmployees.invalid && LHnoOfEmployees.touched">\n            No of Employees is required.\n        </span>\n      </div>\n\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': LHhoursGained.invalid && LHhoursGained.touched,\n        \'has-success\': LHhoursGained.valid && LHhoursGained.touched }">\n        <label class="control-label">Hours Gained per day : </label>\n        <input type="number" class="form-control" name="LHhoursGained" required\n        [(ngModel)]="losthour.hoursGained"\n        #LHhoursGained="ngModel">\n        <span class="help-block" *ngIf="LHhoursGained.invalid && LHhoursGained.touched">\n            Hours Gained per day is required.\n        </span>\n      </div>\n      <ul>\n        <li>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary" [disabled]="LHform.invalid">Calculate</button>\n      </div>\n        </li>\n        <li>\n      <div class="form-group">\n        <button type="reset" value="Reset Form" class="btn btn-warning" (click)="resetLH()">Reset</button>\n      </div>\n        </li>\n      </ul>\n      <p *ngIf="losthour.saving!=null" class="lead well">Saving : {{losthour.saving}}</p>\n    </form>\n\n  </div>\n</div>\n<div class="row">\n  <div class="col-sm-6">\n    <h4 class="text-center">Cost of Payroll Administration</h4>\n    <form (ngSubmit)="processFormPA()" #PAform="ngForm">\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': PAsalary.invalid && PAsalary.touched,\n        \'has-success\': PAsalary.valid && PAsalary.touched }">\n        <label class="control-label">Salary : </label>\n        <input type="number" class="form-control" name="PAsalary" required\n        [(ngModel)]="payrolladmin.salary"\n        #PAsalary="ngModel">\n        <span class="help-block" *ngIf="PAsalary.invalid && PAsalary.touched">\n            Salary is required.\n        </span>\n      </div>\n\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': PAdaysSaved.invalid && PAdaysSaved.touched,\n        \'has-success\': PAdaysSaved.valid && PAdaysSaved.touched }">\n        <label class="control-label">Days Saved : </label>\n        <input type="number" class="form-control" name="PAdaysSaved" required\n        [(ngModel)]="payrolladmin.daysSaved"\n        #PAdaysSaved="ngModel">\n        <span class="help-block" *ngIf="PAdaysSaved.invalid && PAdaysSaved.touched">\n            Days Saved is required.\n        </span>\n      </div>\n\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': PAworkingDays.invalid && PAworkingDays.touched,\n        \'has-success\': PAworkingDays.valid && PAworkingDays.touched }">\n        <label class="control-label">Working Days in Month : </label>\n        <input type="number" class="form-control" name="PAworkingDays" required\n        [(ngModel)]="payrolladmin.workingDays"\n        #PAworkingDays="ngModel">\n        <span class="help-block" *ngIf="PAworkingDays.invalid && PAworkingDays.touched">\n            Working Days in Month is required.\n        </span>\n      </div>\n\n      <ul>\n        <li>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary" [disabled]="PAform.invalid">Calculate</button>\n      </div>\n        </li>\n        <li>\n      <div class="form-group">\n        <button type="reset" value="Reset Form" class="btn btn-warning" (click)="resetPA()">Reset</button>\n      </div>\n        </li>\n      </ul>\n      <p *ngIf="payrolladmin.saving!=null" class="lead well">Saving : {{payrolladmin.saving}}</p>\n    </form>\n\n   </div>\n  <div class="col-sm-6">\n    <h4 class="text-center">Cost of Employee & Manager queries</h4>\n    <form (ngSubmit)="processFormQ()" #Qform="ngForm">\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': QavgSalary.invalid && QavgSalary.touched,\n        \'has-success\': QavgSalary.valid && QavgSalary.touched }">\n        <label class="control-label">Avg Salary : </label>\n        <input type="number" class="form-control" name="QavgSalary" required\n        [(ngModel)]="queries.avgSalary"\n        #QavgSalary="ngModel">\n        <span class="help-block" *ngIf="QavgSalary.invalid && QavgSalary.touched">\n            Avg Salary is required.\n        </span>\n      </div>\n\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': QnoOfEmployees.invalid && QnoOfEmployees.touched,\n        \'has-success\': QnoOfEmployees.valid && QnoOfEmployees.touched }">\n        <label class="control-label">No of Employees : </label>\n        <input type="number" class="form-control" name="QnoOfEmployees" required\n        [(ngModel)]="queries.noOfEmployees"\n        #QnoOfEmployees="ngModel">\n        <span class="help-block" *ngIf="QnoOfEmployees.invalid && QnoOfEmployees.touched">\n            No of Employees is required.\n        </span>\n      </div>\n\n      <div class="form-group"\n        [ngClass]="{ \n        \'has-error\': QminutesGained.invalid && QminutesGained.touched,\n        \'has-success\': QminutesGained.valid && QminutesGained.touched }">\n        <label class="control-label">Minutes Gained per day : </label>\n        <input type="number" class="form-control" name="QminutesGained" required\n        [(ngModel)]="queries.minutesGained"\n        #QminutesGained="ngModel">\n        <span class="help-block" *ngIf="QminutesGained.invalid && QminutesGained.touched">\n            Minutes Gained per day is required.\n        </span>\n      </div>\n      <ul>\n        <li>\n      <div class="form-group">\n        <button type="submit" class="btn btn-primary" [disabled]="Qform.invalid">Calculate</button>\n      </div>\n        </li>\n        <li>\n      <div class="form-group">\n        <button type="reset" value="Reset Form" class="btn btn-warning" (click)="resetQ()">Reset</button>\n      </div>\n        </li>\n      </ul>\n      <p *ngIf="queries.saving!=null" class="lead well">Saving : {{queries.saving}}</p>\n    </form>\n  </div>\n</div>\n\n<div align="center">\n  <p *ngIf="roi.roiperannum!=null" class="lead well">{{roi.roiperannum}}</p>\n  <button class="btn btn-success" (click)="calculateROI()">ROI Per Annum</button>\n  \n</div>\n</div>'},624:function(n,e,a){n.exports=a(343)}},[624]);